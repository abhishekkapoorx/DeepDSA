version: '3.8'

services:
  # Backend API service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: deepdsa-backend
    ports:
      - "5373:5373"
    environment:
      - NODE_ENV=production
      - PORT=5373
      - MONGO_URI=mongodb://mongo:27017/deepdsa
      - FRONTEND_URL=http://localhost:3000
    depends_on:
      - mongo
      - redis
    networks:
      - deepdsa-network
    restart: unless-stopped
    volumes:
      - ./backend/logs:/app/logs

  # Frontend Next.js service
  frontend:
    build:
      context: ./main-fb
      dockerfile: Dockerfile
    container_name: deepdsa-frontend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://localhost:5000
      - DATABASE_URL=mongodb://mongo:27017/deepdsa
    env_file:
      - ./main-fb/.env
    depends_on:
      - backend
    networks:
      - deepdsa-network
    restart: unless-stopped

  # MongoDB service
  mongo:
    image: mongo:7.0
    container_name: deepdsa-mongo
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_DATABASE=deepdsa
    volumes:
      - mongo_data:/data/db
      - ./backend/mongo-init:/docker-entrypoint-initdb.d
    networks:
      - deepdsa-network
    restart: unless-stopped

  # Redis service for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: deepdsa-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - deepdsa-network
    restart: unless-stopped
    command: redis-server --appendonly yes

  # Ngrok for all tunnels (single agent session)
  ngrok:
    image: ngrok/ngrok:latest
    container_name: deepdsa-ngrok
    ports:
      - "4040:4040"
    environment:
      - NGROK_AUTHTOKEN=${NGROK_AUTHTOKEN:-}
    volumes:
      - ./ngrok.yml:/etc/ngrok.yml
    command: start --all --config=/etc/ngrok.yml --authtoken=${NGROK_AUTHTOKEN}
    depends_on:
      - frontend
      # - backend
      - mongo
    networks:
      - deepdsa-network
    restart: unless-stopped
    profiles:
      - tunnel

  # MongoDB Express (optional - for database management)
  mongo-express:
    image: mongo-express:latest
    container_name: deepdsa-mongo-express
    ports:
      - "8081:8081"
    environment:
      - ME_CONFIG_MONGODB_SERVER=mongo
      - ME_CONFIG_MONGODB_PORT=27017
      - ME_CONFIG_MONGODB_ADMINUSERNAME=
      - ME_CONFIG_MONGODB_ADMINPASSWORD=
      - ME_CONFIG_BASICAUTH_USERNAME=admin
      - ME_CONFIG_BASICAUTH_PASSWORD=admin123
    depends_on:
      - mongo
    networks:
      - deepdsa-network
    restart: unless-stopped
    profiles:
      - dev
      - tunnel

  # Judge0 Code Execution Service
  judge0-server:
    image: judge0/judge0:1.13.1
    container_name: deepdsa-judge0-server
    volumes:
      - ./judge/judge0.conf:/judge0.conf:ro
    ports:
      - "2358:2358"
    privileged: true
    networks:
      - deepdsa-network
    restart: unless-stopped
    depends_on:
      judge0-db:
        condition: service_healthy
      judge0-redis:
        condition: service_healthy
    environment:
      - REDIS_HOST=judge0-redis
      - REDIS_PASSWORD=68zzFzRSDNw3ZpaNucnzKVPFWJcqBMMs
      - POSTGRES_HOST=judge0-db
      - POSTGRES_PASSWORD=judge0_password
    logging:
      driver: json-file
      options:
        max-size: 100M

  judge0-workers:
    image: judge0/judge0:1.13.1
    container_name: deepdsa-judge0-workers
    command: ["./scripts/workers"]
    volumes:
      - ./judge/judge0.conf:/judge0.conf:ro
    privileged: true
    networks:
      - deepdsa-network
    restart: unless-stopped
    depends_on:
      judge0-db:
        condition: service_healthy
      judge0-redis:
        condition: service_healthy
      judge0-server:
        condition: service_started
    environment:
      - REDIS_HOST=judge0-redis
      - REDIS_PASSWORD=68zzFzRSDNw3ZpaNucnzKVPFWJcqBMMs
      - POSTGRES_HOST=judge0-db
      - POSTGRES_PASSWORD=judge0_password
    logging:
      driver: json-file
      options:
        max-size: 100M

  judge0-db:
    image: postgres:16.2
    container_name: deepdsa-judge0-db
    env_file: ./judge/judge0.conf
    volumes:
      - judge0_data:/var/lib/postgresql/data/
    networks:
      - deepdsa-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: json-file
      options:
        max-size: 100M

  judge0-redis:
    image: redis:7.2.4
    container_name: deepdsa-judge0-redis
    command: [
      "bash", "-c",
      'docker-entrypoint.sh --appendonly no --requirepass "$$REDIS_PASSWORD"'
    ]
    env_file: ./judge/judge0.conf
    environment:
      - REDIS_PASSWORD=68zzFzRSDNw3ZpaNucnzKVPFWJcqBMMs
    networks:
      - deepdsa-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "68zzFzRSDNw3ZpaNucnzKVPFWJcqBMMs", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: json-file
      options:
        max-size: 100M

volumes:
  mongo_data:
    driver: local
  redis_data:
    driver: local
  judge0_data:
    driver: local

networks:
  deepdsa-network:
    driver: bridge 